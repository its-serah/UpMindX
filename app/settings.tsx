import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, Pressable, Alert, ScrollView } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import * as Haptics from 'expo-haptics';
import { configManager, setupMistralApiKey } from '@/lib/config';
import { initializeMistral } from '@/lib/mistral-api';
import { IconSymbol } from '@/components/ui/icon-symbol';

export default function SettingsScreen() {
  const [apiKey, setApiKey] = useState('');
  const [isConfigured, setIsConfigured] = useState(configManager.isMistralEnabled());
  const [isTesting, setIsTesting] = useState(false);

  const handleSaveApiKey = async () => {
    if (!apiKey.trim()) {
      Alert.alert('Error', 'Please enter your Mistral API key');
      return;
    }

    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setIsTesting(true);

    try {
      const success = setupMistralApiKey(apiKey.trim());
      
      if (success) {
        initializeMistral(apiKey.trim());
        setIsConfigured(true);
        setApiKey(''); // Clear input for security
        
        Alert.alert(
          'Success! üéâ',
          'Mistral AI is now configured. You\'ll get smarter questions based on video content!',
          [{ text: 'Great!', style: 'default' }]
        );
      } else {
        Alert.alert(
          'Invalid API Key',
          'Please check your API key format and try again.'
        );
      }
    } catch (error) {
      Alert.alert(
        'Configuration Error',
        'Failed to configure Mistral AI. Please try again.'
      );
    } finally {
      setIsTesting(false);
    }
  };

  const handleDisableAI = () => {
    Alert.alert(
      'Disable AI Questions?',
      'This will switch back to basic questions. You can re-enable anytime.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Disable',
          style: 'destructive',
          onPress: () => {
            configManager.setMistralApiKey('');
            setIsConfigured(false);
            Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
          }
        }
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <View style={styles.content}>
          <Text style={styles.title}>Settings</Text>
          
          {/* AI Configuration Section */}
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <IconSymbol name="brain" size={24} color="#6366F1" />
              <Text style={styles.sectionTitle}>AI-Powered Questions</Text>
            </View>
            
            <Text style={styles.sectionDescription}>
              Get contextual, intelligent questions generated by Mistral AI based on video content.
            </Text>

            {isConfigured ? (
              <View style={styles.configuredContainer}>
                <View style={styles.statusContainer}>
                  <IconSymbol name="checkmark.circle.fill" size={20} color="#22C55E" />
                  <Text style={styles.configuredText}>AI Questions Enabled</Text>
                </View>
                
                <Text style={styles.configuredDescription}>
                  You're getting smart, contextual questions powered by AI!
                </Text>
                
                <Pressable 
                  style={styles.disableButton}
                  onPress={handleDisableAI}
                >
                  <Text style={styles.disableButtonText}>Disable AI</Text>
                </Pressable>
              </View>
            ) : (
              <View style={styles.configurationContainer}>
                <Text style={styles.inputLabel}>Mistral API Key</Text>
                <TextInput
                  style={styles.apiKeyInput}
                  placeholder="Enter your Mistral API key..."
                  value={apiKey}
                  onChangeText={setApiKey}
                  secureTextEntry
                  autoCapitalize="none"
                  autoCorrect={false}
                />
                
                <Pressable
                  style={[styles.saveButton, (!apiKey.trim() || isTesting) && styles.saveButtonDisabled]}
                  onPress={handleSaveApiKey}
                  disabled={!apiKey.trim() || isTesting}
                >
                  <Text style={styles.saveButtonText}>
                    {isTesting ? 'Configuring...' : 'Save API Key'}
                  </Text>
                </Pressable>
                
                <Text style={styles.helpText}>
                  üí° Get your free API key from mistral.ai
                  {"\n"}üîí Your key is stored locally and securely
                </Text>
              </View>
            )}
          </View>
          
          {/* App Info Section */}
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <IconSymbol name="info.circle" size={24} color="#8B5CF6" />
              <Text style={styles.sectionTitle}>App Information</Text>
            </View>
            
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>Version</Text>
              <Text style={styles.infoValue}>1.0.0</Text>
            </View>
            
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>Made with</Text>
              <Text style={styles.infoValue}>‚ù§Ô∏è for growth-minded learners</Text>
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 30,
    textAlign: 'center',
  },
  section: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
    marginLeft: 10,
  },
  sectionDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 20,
    lineHeight: 20,
  },
  configurationContainer: {
    gap: 16,
  },
  configuredContainer: {
    gap: 12,
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  configuredText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#22C55E',
  },
  configuredDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  apiKeyInput: {
    borderWidth: 1,
    borderColor: '#E5E7EB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    backgroundColor: '#F9FAFB',
  },
  saveButton: {
    backgroundColor: '#6366F1',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  saveButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  saveButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  disableButton: {
    backgroundColor: '#FEE2E2',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  disableButtonText: {
    color: '#DC2626',
    fontSize: 14,
    fontWeight: '500',
  },
  helpText: {
    fontSize: 12,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 16,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
  },
  infoLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
  },
});
